// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status{
  ACTIVE
  INACTIVE
}


///////////////////////////////////// Company schema ////////////////////////////////////

model Company{
  companyId           String  @id @default(uuid())
  companyName         String
  companyAbbreviation String
  createdAt           DateTime @default(now())
}





//////////////////////////////////// User schema ////////////////////////////////////////

model User{
  userId          String  @id @default(uuid())
  firstName       String?
  middleName      String?
  lastName        String?
  username        String
  email           String
  status          Status
  password        String
  roleId          String?
  gender          String?
  phoneNumber     String?
  mobileNumber    String?
  dateOfBirth     String?
  location        String?
  interest        String?
  bio             String?
  createdAt       DateTime @default(now())
  role           Role? @relation(fields: [roleId], references: [roleId])
}


model Role{
  roleId          String @id @default(uuid())
  role            String
  status          Status
  description     String?
  users           User[]
  createdAt       DateTime @default(now())
}



//////////////////////////////////// Item schema ////////////////////////////////////////

model Item{
  itemId                        String @id @default(uuid())
  ID                            String
  name                          String
  itemGroup                     String
  unitOfMeasure                 String
  openingStock                  String
  valuationRate                 String
  standardSellingRate           String
  brandName                     String
  description                   String
  shelfLifeInDays               String
  warrantyPeriod                String
  endOfLife                     String
  weightPerUnit                 String
  defaultMaterialRequestType    String
  weightUom                     String
  valuation                     String
  defaultPurchaseUnitOfMeasure  String
  leadTimeInDays                String
  safetyStock                   String
  countryOfOrigin               String
  customsTariffNumber           String
  defaultSalesUnitMeasure       String
  maxDiscount                   String
  status          Status
  barcode         Barcode[]
  accounting      Accounting[]
  supplier        Supplier[]
  tax             Tax[]
  customerDetails CustomerDetails[]
  createdAt       DateTime @default(now())
}


model Barcode{
  barcodeId       String @id @default(uuid())
  barcode         String
  barcodeType     String  
  uom             String
  itemId          String
  item            Item @relation(fields: [itemId], references: [itemId])
  createdAt       DateTime @default(now())
}


model Accounting{
  accountingId                String @id @default(uuid())
  itemId                      String
  item                        Item @relation(fields: [itemId], references: [itemId])
  company                     String
  defaultWarehouse            String
  defaultPriceList            String
  createdAt                   DateTime @default(now())
}


model Supplier{
  supplierId          String @id @default(uuid())
  itemId              String
  item                Item @relation(fields: [itemId], references: [itemId])
  supplier            String
  supplierPartNumber  String
}

model CustomerDetails{
  customerDetailsId   String @id @default(uuid())
  itemId              String
  item                Item @relation(fields: [itemId], references: [itemId])
  customerName        String
  customerGroup       String
  refCode             String
}



model Tax{
  taxId             String @id @default(uuid())
  itemId            String
  item              Item @relation(fields: [itemId], references: [itemId])
  itemTaxTemplate   String
  taxCategory       String
  validFrom         String
  minimumNetRate    String
  maximumNetRate    String
  createdAt         DateTime @default(now())
}

/////////////////////////////// Material Requested Schema ///////////////////////////////


model MaterialRequested{
  materialRequestedId     String @id @default(uuid())
  status                  String
  company                 String
  purpose                 String
  transactionDate         String
  requiredBy              String
  setTargetWarehouse      String
  ID                      String
  material                Material[]
}

model Material {
  materialid           String    @id @default(uuid())
  itemCode             String
  requiredBy           String
  itemName             String
  description          String
  quantity             String
  uom                  String
  uomConversionFactor  String
  targetWarehouse      String
  rate                 String
  expenseAccount       String
  wipCompositeAsset    String
  manufacturer         String
  bomNo                String
  project              String
  costCenter           String
  materialRequestedId   String
  materialRequested     MaterialRequested @relation(fields: [materialRequestedId], references: [materialRequestedId])
}


/////////////////////////////////// Purchase Order Schema //////////////////////////////////////

model PurchaseOrder{
  purchaseOrderId     String  @id @default(uuid())
  series                    String
  date                      String
  company                   String
  supplier                  String
  requiredBy                String
  costCenter                String
  project                   String
  currency                  String
  setTargetWarehouse        String
  taxCategory              String
  shippingRule             String
  incoterm                  String
  applyAdditionalDiscountOn String
  additionalDiscountPercentage String
  additionalDiscountAmount String
  supplierAddress           String
  supplierContact           String
  shippingAddress           String
  terms                     String
  description               String
  purchaseOrderItem         PurchaseOrderItem[]
}


model PurchaseOrderItem{
  itemId               String  @id  @default(uuid())
  itemCode             String
  itemName             String
  requiredBy           String
  expectedDeliveryDate String
  quantity             String
  rate                 String
  amount               Int
  purchaseOrderId      String

  purchaseOrder       PurchaseOrder   @relation(fields: [purchaseOrderId], references: [purchaseOrderId])
}



/////////////////////////////////// Account Schema //////////////////////////////////////

model Account {
  id              String    @id @default(uuid())
  accountId       String    @unique
  accountName     String
  accountNumber   String
  accountType     AccountType
  status          Status
  balance         String
  currency        String
  parentAccountId String?
  // parentAccount   Account?  @relation("ParentAccount", fields: [parentAccountId], references: [id]) // Optional: Parent Account Relationship
  description     String?   
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Enum for Account Types
enum AccountType {
  ASSET
  LIABILITY
  INCOME
  EXPENSE
}


model SalesInvoice{
  id              String @id @default(uuid())
  invoiceId       String
  title           String
  status          String
  grandTotal      String
}

model PurchaseInvoice{
  id              String @id @default(uuid())
  invoiceId       String
  title           String
  status          String
  postingDate     String
  grandTotal      String
}

model PaymentEntry{
  id              String @id @default(uuid())
  title           String
  status          String
  type            String
  postingDate     String
  mode            String
}
